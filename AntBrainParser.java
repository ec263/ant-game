/* AntBrainParser.java */
/* Generated By:JavaCC: Do not edit this line. AntBrainParser.java */
import java.io.PrintStream ;
import java.io.StringReader;

        class AntBrainParser implements AntBrainParserConstants {

  final public void Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SENSE:
      case MARK:
      case UNMARK:
      case PICKUP:
      case DROP:
      case TURN:
      case MOVE:
      case FLIP:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SENSE:{
        jj_consume_token(SENSE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HERE:{
          jj_consume_token(HERE);
          break;
          }
        case AHEAD:{
          jj_consume_token(AHEAD);
          break;
          }
        case LEFTAHEAD:{
          jj_consume_token(LEFTAHEAD);
          break;
          }
        case RIGHTAHEAD:{
          jj_consume_token(RIGHTAHEAD);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FRIEND:{
          jj_consume_token(FRIEND);
          break;
          }
        case FOE:{
          jj_consume_token(FOE);
          break;
          }
        case FRIENDWITHFOOD:{
          jj_consume_token(FRIENDWITHFOOD);
          break;
          }
        case FOEWITHFOOD:{
          jj_consume_token(FOEWITHFOOD);
          break;
          }
        case FOOD:{
          jj_consume_token(FOOD);
          break;
          }
        case ROCK:{
          jj_consume_token(ROCK);
          break;
          }
        case MARKER:{
          jj_consume_token(MARKER);
          jj_consume_token(I);
          break;
          }
        case FOEMARKER:{
          jj_consume_token(FOEMARKER);
          break;
          }
        case HOME:{
          jj_consume_token(HOME);
          break;
          }
        case FOEHOME:{
          jj_consume_token(FOEHOME);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MARK:{
        jj_consume_token(MARK);
        jj_consume_token(I);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case UNMARK:{
        jj_consume_token(UNMARK);
        jj_consume_token(I);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case PICKUP:{
        jj_consume_token(PICKUP);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case DROP:{
        jj_consume_token(DROP);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case TURN:{
        jj_consume_token(TURN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LEFT:{
          jj_consume_token(LEFT);
          break;
          }
        case RIGHT:{
          jj_consume_token(RIGHT);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MOVE:{
        jj_consume_token(MOVE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case FLIP:{
        jj_consume_token(FLIP);
        jj_consume_token(I);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case I:{
          jj_consume_token(I);
          break;
          }
        case STATE:{
          jj_consume_token(STATE);
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMENT:{
        jj_consume_token(COMMENT);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(RETURN);
    }
    jj_consume_token(0);
  }

  /** Generated Token Manager. */
  public AntBrainParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3fc,0x3c00,0xc000000,0xc000000,0xffc000,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0x3000000,0xc000000,0xc000000,0xc000000,0xc000000,0xc000000,0x3fc,0x10000000,};
   }

  /** Constructor with InputStream. */
  public AntBrainParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AntBrainParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AntBrainParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AntBrainParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AntBrainParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AntBrainParser(AntBrainParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AntBrainParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

//	public static void main( String[] args ) throws ParseException, TokenMgrError {

//		String s = "Drop 10 \n";
//			  StringReader reader = new StringReader(s);


//			AntBrainParser parser = new AntBrainParser(reader);
//			parser.Start(); 

//			}


}
